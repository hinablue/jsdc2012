// Generated by CoffeeScript 1.3.1
(function() {
  var App, app;

  App = (function() {
    var RedisStore, express, fs, messageStore, parseCookie, redis, sessionStore, uuid;

    App.name = 'App';

    express = require('express');

    redis = require('redis');

    uuid = require('node-uuid');

    RedisStore = require('connect-redis')(express);

    sessionStore = new RedisStore();

    messageStore = redis.createClient();

    fs = require('fs');

    parseCookie = require('connect').utils.parseCookie;

    function App() {
      this.initAndConfigureApp();
      this.runApp();
      this.ioController();
    }

    App.prototype.initAndConfigureApp = function() {
      var _this = this;
      this.app = module.exports = express.createServer();
      this.app.configure(function() {
        _this.app.use(express.bodyParser());
        _this.app.use(express.cookieParser());
        _this.app.use(express.session({
          secret: "POIUYhjnmp)(*&^%rtghbnmlkoi987654ertfghi;lkjhgfPOIUHN",
          store: sessionStore
        }));
        _this.app.use(express["static"](__dirname + '/public'));
        _this.app.set("views", __dirname + "/views");
        _this.app.set("view engine", "jade");
        return _this.app.set("view options", {
          pretty: true
        });
      });
      this.app.get("/controller", function(req, res) {
        var nowpage;
        nowpage = 1;
        if (req.session.nowpage != null) {
          nowpage = req.session.nowpage;
        }
        req.session.nowpage = nowpage;
        return res.render("controller", {
          layout: false,
          nowpage: nowpage
        });
      });
      this.app.get("/showoff", function(req, res) {
        var nickname;
        if (req.session.nickname != null) {
          nickname = req.session.nickname;
        }
        return res.render("showoff", {
          layout: false,
          nickname: nickname
        });
      });
      this.app.post("/chat", function(req, res) {
        if (!req.session.nickname) {
          req.session.nickname = req.body.nickname;
          req.session.hkey = uuid.unparse(uuid.v1({}, [], 16), 16);
          console.info(req.session.hkey);
          messageStore.hmset(req.session.hkey, {
            "nickname": req.body.nickname,
            "created": new Date().getTime()
          }, function(err, res) {
            console.info(err);
            return console.info(res);
          });
        } else {
          req.session.nickname = req.body.nickname;
          sessionStore.set(req.cookies['connect.sid'], req.session, function(err) {
            return console.info(err);
          });
        }
        return res.send(req.body);
      });
      return this.app.get("/", function(req, res) {
        var nickname;
        if (req.session.nickname != null) {
          nickname = req.session.nickname;
        }
        return res.render("index", {
          layout: false,
          nickname: nickname
        });
      });
    };

    App.prototype.runApp = function() {
      var port,
        _this = this;
      port = process.env.PORT || 3000;
      return this.app.listen(port, function() {
        return console.info("Express server listening on port " + (_this.app.address().port) + " in " + _this.app.settings.env + " mode");
      });
    };

    App.prototype.ioController = function() {
      var _this = this;
      this.io = require('socket.io').listen(this.app);
      this.io.configure(function() {
        _this.io.enable("browser client minification");
        _this.io.enable("browser client etag");
        _this.io.enable("browser client gzip");
        _this.io.set("log level", 1);
        return _this.io.set('authorization', function(data, callback) {
          if (data.headers.cookie != null) {
            data.cookie = parseCookie(data.headers.cookie);
            data.sessID = data.cookie['connect.sid'];
            return sessionStore.get(data.sessID, function(err, session) {
              if (err || !session) {
                return callback(new Error("There's no session"));
              } else {
                return callback(null, true);
              }
            });
          } else {
            return callback(new Error("No cookie transmitted!"));
          }
        });
      });
      return this.io.on('connection', function(client) {
        var cookie, hkey, hs, nowpage;
        console.info("Got connected to server!");
        hs = client.handshake;
        hkey = uuid.unparse(uuid.v1({}, [], 16), 16);
        nowpage = 1;
        if (hs.headers.cookie != null) {
          cookie = parseCookie(hs.headers.cookie);
          sessionStore.get(cookie['connect.sid'], function(err, session) {
            if (!err || err === null || session) {
              hkey = session.hkey;
              return nowpage = session.nowpage;
            }
          });
        }
        client.on("drawClick", function(data) {
          return client.broadcast.emit("draw", {
            x: data.x,
            y: data.y,
            type: data.type
          });
        });
        client.on("control-slide", function(data, fn) {
          var _this = this;
          nowpage = data.page;
          hs = client.handshake;
          if (hs.headers.cookie != null) {
            cookie = parseCookie(hs.headers.cookie);
            sessionStore.get(cookie['connect.sid'], function(err, session) {
              if (!err || err === null || session) {
                session.nowpage = nowpage;
                sessionStore.set(cookie['connect.sid'], session, function() {
                  return console.info(arguments);
                });
                return console.info(session, data.page);
              }
            });
          }
          return client.broadcast.emit("slide", {
            page: data.page
          });
        });
        client.on("message", function(data, fn) {
          messageStore.hlen(hkey, function(err, res) {
            var messageData, mlength,
              _this = this;
            mlength = !err && res > 0 ? res / 2 : 1;
            messageData = {};
            messageData['msg' + mlength.toString()] = data.message;
            messageData['ts' + mlength.toString()] = new Date();
            messageStore.hmset(hkey, messageData, function(err, res) {
              return client.broadcast.emit("message", {
                nickname: data.nickname,
                message: data.message
              });
            });
            return messageData = null;
          });
          return fn(data.message);
        });
        return client.on("disconnect", function(data) {});
      });
    };

    return App;

  })();

  app = new App();

}).call(this);
